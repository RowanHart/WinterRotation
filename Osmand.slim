initialize() {
   initializeSLiMModelType("nonWF");
   initializeSLiMOptions(dimensionality="xy");
   initializeTreeSeq(retainCoalescentOnly=F);
   initializeMutationRate(0.0);
   initializeMutationType("m1", 0.5, "f", 0.0);
   initializeGenomicElementType("g1", m1, 1.0);
   initializeGenomicElement(g1, 0, 1e8-1);
   initializeRecombinationRate(5e-9);    

   defineConstant("LAMBDA", 2.0); // birth rate
   defineConstant("K", 2);      // carrying capacity per unit area
   defineConstant("W", 50);     // death rate
    defineConstant("SIGMAi", 0.5);  // interaction distance
    defineConstant("SIGMAd", 0.25);  // interaction distance
   
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3*SIGMAi);
    i1.setInteractionFunction("n", 1.0/(2*PI*SIGMAi^2), SIGMAi);

    // spatial mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3*SIGMAd);
    i2.setInteractionFunction("n", 1.0/(2*PI*SIGMAd^2), SIGMAd);
}

reproduction() {
   neighbor_density = i1.totalOfNeighborStrengths(individual);
   num_offspring = rpois(1, LAMBDA / (1 + neighbor_density / K));
   mate = i1.drawByStrength(individual, 1);  // single mating
   if (size(mate) > 0) {
       for (k in seqLen(num_offspring)) {
           offspring = p1.addCrossed(individual, mate);
           pos = individual.spatialPosition + rnorm(2, 0, SIGMAd);
           offspring.setSpatialPosition(p1.pointReflected(pos));
       }
   }
}

1 early() {
   sim.addSubpop("p1", K * W * W);
   p1.setSpatialBounds(c(0.0, 0.0, W, W));
   p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(K*W*W)));
}

early() { // survival probabilities
        p1.fitnessScaling = 1; //all individuals have same fitness (neutral)
        inds = sim.subpopulations.individuals;
        inds[inds.age > 0].fitnessScaling = 0.0;
}

late() {
   i1.evaluate(sim.subpopulations);
   i2.evaluate(sim.subpopulations);
   sim.treeSeqRememberIndividuals(p1.individuals, permanent=F);
}

20000 late() {
   sim.treeSeqOutput("osmand_20000Anc.trees");
   catn("Done.");
   sim.simulationFinished();
}
